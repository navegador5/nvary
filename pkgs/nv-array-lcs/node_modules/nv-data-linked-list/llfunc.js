const {false_ec} = require("nv-facutil-defp");

const {
    SYM_LIST,
    SYM_PREV,
    SYM_NEXT
} = require("./cmmn");


function init(list) { 
   list = (list === undefined)?{}:list;
   list[SYM_NEXT] = list;
   list[SYM_PREV] = list;
   list[SYM_LIST] = list;
   false_ec(list,SYM_NEXT,SYM_PREV,SYM_LIST);
   return(list)
}

function _append(list,item) {
  item[SYM_NEXT] = list;
  item[SYM_PREV] = list[SYM_PREV];
  item[SYM_LIST] = list;
  list[SYM_PREV][SYM_NEXT] = item;
  list[SYM_PREV] = item;
  return(item)
}


function append(list, item) {
  if(item === undefined) {item = init()}
  disconn(item);
  return(_append(list,item))
}



function is_empty(list) {
  return list[SYM_NEXT] === list;
}

function head(list) {
    if (list[SYM_NEXT] === list) {
        return(null)
    } else {
        return(list[SYM_NEXT])
    }
}

function tail(list) {
    if (list[SYM_PREV] === list) {
        return(null)
    } else {
        return(list[SYM_PREV])
    }
}


function length(list) {
    let c = 0
    let curr = list[SYM_NEXT]
    while(curr!==list) {
        c = c + 1;
        curr = curr[SYM_NEXT]
    }
    return(c)
}

function *gen(list) {
    let curr = list[SYM_NEXT]
    while(curr!==list) {
        yield(curr);
        curr = curr[SYM_NEXT]
    }
}

function get_item(list,index) {
    let c = 0
    let g = gen(list);
    for(let item of g) {
        if(c===index) {return(item)}
        c = c+1
    }
    return(null)
}

function arrize(list) {return(Array.from(gen(list)))}

////

function disconn(item) {
  if (item[SYM_NEXT]) {
    item[SYM_NEXT][SYM_PREV] = item[SYM_PREV];
  }

  if (item[SYM_PREV]) {
    item[SYM_PREV][SYM_NEXT] = item[SYM_NEXT];
  }
  item[SYM_NEXT] = item;
  item[SYM_PREV] = item;
  item[SYM_LIST] = item;  
}


function insert_before(item,new_item) {
    if(new_item === undefined) {new_item = init()}
    disconn(new_item);
    ////
    let curr_prev = item[SYM_PREV]
    curr_prev[SYM_NEXT] = new_item;
    new_item[SYM_PREV] = curr_prev;
    ////
    new_item[SYM_NEXT] = item;
    item[SYM_PREV] = new_item;
    ////
    new_item[SYM_LIST] = item[SYM_LIST]
    ////
    return(new_item);
}

function insert_after(item,new_item) {
    if(new_item === undefined) {new_item = init()}
    disconn(new_item);
    ////
    let curr_next = item[SYM_NEXT]
    curr_next[SYM_PREV] = new_item;
    new_item[SYM_NEXT] = curr_next;
    ////
    new_item[SYM_PREV] = item;
    item[SYM_NEXT] = new_item;
    ////
    new_item[SYM_LIST] = item[SYM_LIST]
    ////
    return(new_item);
}



function next(item) {return(item[SYM_NEXT])}
function prev(item) {return(item[SYM_PREV])}

function index_of(item) {
    let c =-1; 
    let list = item[SYM_LIST]
    let curr = item;
    while(curr!==list) {
        c = c + 1;
        curr = curr[SYM_PREV];
    }
    return(c)
}

function list(item) { return(item[SYM_LIST])}

function * gen_psibs(item,including_self=false) {
    let list = item[SYM_LIST]
    if(including_self) { yield(item)}
    item = item[SYM_PREV]
    while(item!==list) {
        yield(item);
        item = item[SYM_PREV]
    }
}


function * gen_fsibs(item,including_self=false) {
    let list = item[SYM_LIST]
    if(including_self) { yield(item)}
    item = item[SYM_NEXT]
    while(item!==list) {
        yield(item);
        item = item[SYM_NEXT]
    }
}


function psibs(item,including_self=false) {
    let arr = Array.from(gen_psibs(item,including_self));
    arr.reverse();
    return(arr)
}
function fsibs(item,including_self=false) {return(Array.from(gen_fsibs(item,including_self)))}


///
function from_ary(arr,data_key="_data") {
    let l = init();
    for(let each of arr) {
        let item = append(l);
        item[data_key] = each;
    }
    return(l)
}

function to_ary(l,data_key="_data") {
    let arr = Array.from(gen(l));
    return(arr.map(r=>r[data_key]))
}


module.exports = {
  init,
  _append,
  append,
  is_empty,
  head,
  tail,
  length,
  gen,
  get_item,
  arrize,
  ////
  insert_before,
  insert_after,
  disconn,
  next,
  prev,
  index_of,
  list,
  gen_psibs,
  gen_fsibs,
  psibs,
  fsibs,
  ////
  from_ary,
  to_ary,
};

