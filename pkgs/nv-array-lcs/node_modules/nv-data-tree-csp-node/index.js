const cspis=require("nv-data-tree-csp-is"),ndget=require("nv-data-tree-csp-ndget"),{ZWNJ}=require("nv-facutil-basic"),SYM_DICT={release_forest:Symbol("release_forest"),get_forest:Symbol("get_forest"),get_ctor:Symbol("get_ctor"),set_id:Symbol("set_id")};class _Node{#forest;#id;#ctor;constructor(e,t){this.#ctor=this.constructor,this.#forest=e,this.#id=t}get[SYM_DICT.get_forest](){return this.#forest}get[SYM_DICT.get_ctor](){return this.#ctor}[SYM_DICT.release_forest](){this.#forest=null}[SYM_DICT.set_id](e){this.#id=e}get $fid_(){return this.#forest.fid}get $id_(){return this.#id}$noop(){}$new(e=_Node){return this.#forest.node(e)}$is_empty(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_empty(e,t,r,d,s,_,[this.#id],[],[])}$is_root(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_root(e,t,r,d,s,_,[this.#id],[],[])}$is_fstch(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_fstch(e,t,r,d,s,_,[this.#id],[],[])}$is_midch(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_midch(e,t,r,d,s,_,[this.#id],[],[])}$is_lstch(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_lstch(e,t,r,d,s,_,[this.#id],[],[])}$is_leaf(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_leaf(e,t,r,d,s,_,[this.#id],[],[])}$is_lonely(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_lonely(e,t,r,d,s,_,[this.#id],[],[])}$is_isolated(){var{idpool:e,fc:t,rb:r,pr:d,lb:s,lc:_}=this.#forest;return cspis.$is_isolated(e,t,r,d,s,_,[this.#id],[],[])}}_Node.SYM_DICT=SYM_DICT,_Node.DFLT_CLONE_FUNC=(e,t)=>{Object.assign(t,e)};const method=require("nv-data-tree-csp-method");for(let e in method)"ERROR_DICT"!==e&&method[e](_Node);const{add_ance_relation}=require("nv-data-tree-csp-relation");add_ance_relation(_Node);const{add_deep_steq,add_deep_lseq}=require("nv-data-tree-cmp");add_deep_steq(_Node),add_deep_lseq(_Node);const{add_cond_leaf_sdfs_next,add_gen_cond_leaf_sdfs_next,add_cond_leaf_sedfs_next,add_gen_cond_leaf_sedfs_next}=require("nv-data-tree-cond-leaf");add_cond_leaf_sdfs_next(_Node),add_gen_cond_leaf_sdfs_next(_Node),add_cond_leaf_sedfs_next(_Node),add_gen_cond_leaf_sedfs_next(_Node);const{_add_string_tag}=require("nv-data-tree-repr");_add_string_tag(_Node);const{add_mlv}=require("nv-data-tree-visit");add_mlv(_Node);const{add_dump,load_from_dump}=require("nv-data-tree-loadump");add_dump(_Node),Object.defineProperty(_Node,"name",{value:ZWNJ});const{RM_METHOD_ARY_OF_MUSTLEAF}=require("nv-data-tree-csp-apidef");class _MustLeaf extends _Node{}RM_METHOD_ARY_OF_MUSTLEAF.forEach(e=>{_MustLeaf.prototype[e]=function(){console.log("can NOT add child to MustLeaf Node")}}),Object.defineProperty(_MustLeaf,"name",{value:"Îµ"});class _TermNode extends _Node{#repr=!0;$is_repr_enabled(){return this.#repr}$enable_repr(){this.#repr=!0}$disable_repr(){this.#repr=!1}}const{_add_repr}=require("nv-data-tree-repr");_add_repr(_TermNode,2),Object.defineProperty(_TermNode,"name",{value:ZWNJ});class _UiNode extends _Node{#disp=!1;$is_disp_enabled(){return this.#disp}$expand(){this.#disp=!0}$expand_all(){this.$sdfs_.forEach(e=>e.$expand())}$foldup(){this.#disp=!1}$foldup_all(){this.$sdfs_.forEach(e=>e.$foldup())}}const{_add_disp}=require("nv-data-tree-repr");function _new_tagged_nds(e,t,r){let d=e.constructor,s=e[d.SYM_DICT.get_forest],_=Array.from({length:r}).map(e=>s.node(d));return _.forEach(e=>e.$tag_=t),_}_add_disp(_UiNode),Object.defineProperty(_UiNode,"name",{value:ZWNJ});class _TagNode extends _Node{#tag="";constructor(e,t,r=""){super(e,t),this.#tag=r}get $tag_(){return this.#tag}set $tag_(e){this.#tag=e}$prepend(e="",t=1){t=_new_tagged_nds(this,e,t);return this.$prepend_children(t),t}$append(e="",t=1){t=_new_tagged_nds(this,e,t);return this.$append_children(t),t}$insert_before(e,t="",r=1){r=_new_tagged_nds(this,t,r);return this.$insert_children_before(e,r),r}$insert_after(e,t="",r=1){r=_new_tagged_nds(this,t,r);return this.$insert_children_after(e,r),r}$arsib(e="",t=1){t=_new_tagged_nds(this,e,t);return this.$add_rsibs(t),t}$alsib(e="",t=1){t=_new_tagged_nds(this,e,t);return this.$add_lsibs(t),t}$aparent(e=""){e=_new_tagged_nds(this,e,1);return this.$add_parent(e[0])}}const{_add_sedfs_repr}=require("nv-data-tree-repr");_add_sedfs_repr(_TagNode,2),Object.defineProperty(_TagNode,"name",{value:ZWNJ}),module.exports={_Node:_Node,_TermNode:_TermNode,_UiNode:_UiNode,_TagNode:_TagNode,_MustLeaf:_MustLeaf};