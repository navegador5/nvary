const{AidPool,creat_id,jdcp}=require("nv-facutil-basic"),{false_e}=require("nv-facutil-defp"),nd_loadump=require("nv-data-tree-loadump"),ary_defrag=require("nv-array-defrag"),PROPS=["fc","pr","rb","lb","lc"],DFLT_LOAD_FUNC=(t,r,e,o)=>{o=new t(r,o);return Object.assign(o,e),o};function _load(o,t,s=DFLT_LOAD_FUNC){let i=new Forest(o.maxid,o.fid),r=o.struct.ids,_=o.data,{slots_:d}=i;r.forEach((r,e)=>{d[r]=s(t,i,_[e],r),PROPS.forEach(t=>{i[t][r]=o.struct[t][e]})});var e=new AidPool(o.maxid,d,0,0);return i.idpool=e,i}function _defrag(i){var e=i.slots_;let _=ary_defrag.defrag(e,0,1),d=new Set(Array.from(_.keys()));for(let r=1;r<=d.size;r++){let t=e[r];t[t.constructor.SYM_DICT.set_id](r)}return PROPS.forEach(t=>{let r=i[t];for(let t=1;t<r.length;t++)d.has(t)&&(r[t]=_.get(r[t])??0);for(var[e,o]of _){var s=r[e];r[e]=0,r[o]=s}}),i}function _construct(r,t,e){r.fid=e??creat_id(),r.max_size=t,r.idpool=new AidPool(r.max_size,void 0,0,0);let o=r.idpool.rented_;PROPS.forEach(t=>{r[t]=o.slice(0)}),false_e(r,...PROPS),Object.seal(r)}class Forest{constructor(t=1e4,r){_construct(this,t,r)}get slots_(){return this.idpool.rented_}slot(t){return this.slots_[t]}*gen_entry(){var r=this.slots_.length;for(let t=1;t<r;t++){var e=this.slot(t);0!==e&&(yield[e,t])}}get ids_(){return this.slots_.filter((t,r)=>0!==t).map(t=>t.$id_)}get nodes_(){return this.slots_.filter(t=>0!==t)}get trees_(){return this.nodes_.filter(t=>t.$is_root())}get isolates_(){return this.trees_.filter(t=>t.$is_leaf())}tree(t){var r=this.idpool.rent();if(r<0)return null;t=new t(this,r);return this.slots_[r]=t}node(t){return this.tree(t)}erase_isolated(){var t,r;let e=[];for([t,r]of this.gen_entry())t.$is_isolated()&&(t.$erase(),e.push(t));return e}dump(r=jdcp){var t=this.idpool.maxid_,e=this.fid;let o=this.slots_.filter(t=>0!==t),s=o.map(t=>t.$id_),i={ids:s};PROPS.forEach(r=>{i[r]=s.map(t=>this[r][t])});var _=o.map(t=>r(t));return{fid:e,maxid:t,struct:i,data:_}}load_nd_from_dump(t,r,e=nd_loadump.DFLT_LOAD_FUNC){return nd_loadump.load_from_dump(r,this,t,e)}load_nd_from_nest(t,r,e=nd_loadump.nest.DFLT_NEST_LOAD_FUNC,o="_children"){return nd_loadump.nest.load(this,t,r,e,o)}merge(t,e=nd_loadump.DFLT_LOAD_FUNC){let r=t.trees_;return r.map(t=>{var r=t.$dump();return this.load_nd_from_dump(t.constructor,r,e)})}defrag(){return _defrag(this)}[Symbol.iterator](){return function*(){var t,r;for([t,r]of this.gen_entry())t.$is_root()&&(yield t)}()}}Forest.PROPS=PROPS,Forest.DFLT_LOAD_FUNC=DFLT_LOAD_FUNC,Forest.load_from_dump=(t,r,e=DFLT_LOAD_FUNC)=>_load(t,r,e),module.exports=Forest;